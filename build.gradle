plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.9'
    id "io.spring.javaformat" version "0.0.43"
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.bhngupta'
version = '0.0.1-SNAPSHOT'
description = 'Spring Boot based Task Manager Application'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.google.firebase:firebase-admin:9.1.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.github.cdimascio:dotenv-java:2.2.4'
    implementation 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'  
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootRun {
    // Load environment variables from .env file
    File envFile = project.file('.env')
    if (envFile.exists()) {
        def envMap = [:]
        envFile.readLines().each { line ->
            if (!line.trim().isEmpty() && !line.startsWith('#')) {
                def parts = line.split('=')
                if (parts.size() == 2) {
                    envMap.put(parts[0].trim(), parts[1].trim())
                }
            }
        }
        // Correctly set the environment for the running process
        environment envMap
    }
}